(function() {
    console.log("Loaded javascript version 3");//foo

    /* Functions */

    //define image processor function
    var imageProcessorFunction = function(element) {
        //get the img src
        var imageSrc = element.style.backgroundImage.slice(4, -1);
 
        //only if it hasnt been processed yet
        if (imageSrc) {
            //override all the defaults stuff and just set the width
            element.setAttribute("style","width: 100% !important");
            
            //add a real img tag
            var imgElement = document.createElement("img");
            imgElement.setAttribute("src", imageSrc);
            imgElement.setAttribute("style","width: 100% !important; display: block");
            element.appendChild(imgElement);
        }
    }

    //define tree search function
    var gbProcessAllInterestingElements = function(rootNode, callbackForIElements) {
        if (rootNode && rootNode.nodeName) {
            if (rootNode.nodeName.toLowerCase() == "i" && (
                rootNode.className.toLowerCase() == "img" || (
                    rootNode.classList.contains("img") && (
                        rootNode.classList.contains("ai") ||
                        rootNode.classList.contains("tlPhoto") ||
                        rootNode.classList.contains("coverPhoto") ||
                        rootNode.classList.contains("tlVideo") ||
                        rootNode.classList.contains("tlInlinePhoto") ||
                        rootNode.classList.contains("gridPhoto")
                    )
                )
            )) {//will only process specific nodes
                callbackForIElements(rootNode);
            }

        }
 
        for (var i = 0; i < rootNode.childNodes.length; ++i) {
            var childNode = rootNode.childNodes[i];
 
            gbProcessAllInterestingElements(childNode, callbackForIElements);
        }
    }

    //listens for changes to class
    var listenForElementClassChanges = function (element, callback) {
        if (element) {
            var lastClassName = element.className;
            window.setInterval(function() {   
                var className = element.className;
                if (className !== lastClassName) {
                    callback();   
                    lastClassName = className;
                }
            }, 1000);
        }
    }

    //listens for changes to element contents
    var listenForElementContentChanges = function (element, callback) {
        if (element) {
            var lastContent = element.innerHTML;
            window.setInterval(function() {   
                var content = element.innerHTML;     
                if (content !== lastContent) {
                    lastContent = content;

                    callback();   
                }
            }, 1000);
        }
    }


    /* CSS Mods */

    //no focus ring
    document.styleSheets[0].insertRule(':focus { outline-width: 0 !important; }', 0);

    //sizing overrides
    document.styleSheets[0].insertRule('i[class="img"], i.img.ai, i.img.tlPhoto, i.img.tlVideo, i.img.coverPhoto, i.img.tlInlinePhoto, i.img.gridPhoto, div.storyAttachmentMedia > div { width:100% !important; height: auto !important; margin-left: 0 !important; margin-bottom: 0 !important}', 0);
    document.styleSheets[0].insertRule('div.croppedPhotoGridCol { display:block; margin-bottom:8px }', 0);



    /* DOM Processing */

    //process the current DOM
    gbProcessAllInterestingElements(document.documentElement, imageProcessorFunction);

    //process all future DOM insertion
    document.documentElement.addEventListener("DOMNodeInserted", function(event) {
        //only trigger search on section, articles and div tags
        if (event.target && event.target.tagName) {
            if (event.target.tagName.toLowerCase() == "section" || event.target.tagName.toLowerCase() == "article" || event.target.tagName.toLowerCase() == "div") {
                gbProcessAllInterestingElements(event.target, imageProcessorFunction);
            }
        }
    }, false);


    /* Notifications */

    document.documentElement.addEventListener("DOMNodeInserted", function(event) {
        var element = event.target;

        if (element && element.tagName) {
            // messages: div.item.abb -> div.title
            if (element.tagName.toLowerCase() == "div" && element.classList.contains("item") && element.classList.contains("abb")) {
                var sender = element.querySelector("div.title").innerText;

                var notification = {
                    type: 1,
                    content: sender,
                };

                //send to objc
                window.GBTabAppBrowserBridge.postNotification(notification);
            }
            // notifications: li.abt -> div.c -> _
            else if ((element.tagName.toLowerCase() == "li" || element.tagName.toLowerCase() == "div") && element.classList.contains("abt")) {
                var notificationContent = element.querySelector("div.c").firstChild.innerText;

                var notification = {
                    type: 2,
                    content: notificationContent,
                };

                //send to objc
                window.GBTabAppBrowserBridge.postNotification(notification);
            }
            // friend requests: ol._7k7 -> li.mRequestItem.aclb -> div.msg -> a -> _.actor
            else if (element.tagName.toLowerCase() == "ol" && element.classList.contains("_7k7")) {
                console.log(element);

                var potentialFriend = element.querySelector("li.mRequestItem.aclb div.msg a .actor").innerText;

                var notification = {
                    type: 0,
                    content: potentialFriend,
                };

                //send to objc
                window.GBTabAppBrowserBridge.postNotification(notification);
            }


            
        }
    }, false);

    //notify about jewel states
    window.setInterval(function() {
        var elements = [document.getElementById("requests_jewel"),
                        document.getElementById("messages_jewel"),
                        document.getElementById("notifications_jewel")];

        var hasCount = false;

        for (var i=0; i<3; i++) {
            if (elements[i].classList.contains("hasCount")) {
                hasCount = true;
                break
            }
        }

        window.GBTabAppBrowserBridge.alertsStateUpdate(hasCount);
    }, 1000);

})();